if ($c.target.class == 'windows')
{
    c.poptions =+ "-DWIN32_LEAN_AND_MEAN" "-D_WIN32_WINNT=0x0602"
    if ($c.target.system == 'mingw32')
    {
        c.libs =+ "-lpsapi" "-luser32" "-ladvapi32" "-liphlpapi" "-luserenv" "-lws2_32"
    }
    else
    {
        c.libs =+ "psapi.lib" "user32.lib" "advapi32.lib" "iphlpapi.lib" "userenv.lib" "ws2_32.lib"
    }
}
else
{
    c.poptions =+ "-D_FILE_OFFSET_BITS=64" "-D_LARGEFILE_SOURCE"
}

if ($c.target.class == 'linux')
{
    c.poptions =+ "-D_GNU_SOURCE" "-D_POSIX_C_SOURCE=200112"
    c.libs =+ "-lpthread" "-ldl" "-lrt"
}

lib{uv}: \
    include/h{uv} \
    include/uv/h{aix bsd darwin errno linux os390 posix stdint-msvc2008 sunos threadpool tree unix version win} \
    src/c{fs-poll idna inet random strscpy threadpool timer uv-common uv-data-getter-setters version} \
    src/h{heap-inl idna queue strscpy uv-common}

lib{uv}: src/win/c{async core detect-wakeup dl error fs fs-event getaddrinfo getnameinfo handle loop-watcher pipe thread poll process process-stdio signal snprintf stream tcp tty udp util winapi winsock}: include = ($c.target.class == 'windows')
lib{uv}: src/win/h{atomicops-inl fs-fd-hash-inl handle-inl internal req-inl stream-inl winapi winsock}: include = ($c.target.class == 'windows')
lib{uv}: src/unix/c{async core dl fs getaddrinfo getnameinfo loop-watcher loop pipe poll process random-devurandom signal stream tcp thread tty udp}: include = ($c.target.class != 'windows')
lib{uv}: src/unix/h{atomic-ops internal spinlock}: include = ($c.target.class != 'windows')
lib{uv}: src/unix/c{proctitle linux-core linux-inotify linux-syscalls procfs-exepath random-getrandom random-sysctl-linux epoll}: include = ($c.target.class == 'linux')
lib{uv}: src/unix/h{linux-syscalls}: include = ($c.target.class == 'linux')

c.poptions =+ "-I$src_base/include" "-I$src_base/src"

lib{uv}:
{
  c.export.poptions = "-I$src_base/include"
}

{hbmis objs}{*}: c.poptions += "-DBUILDING_UV_SHARED=1"
libs{uv}: c.export.poptions += "-DUSING_UV_SHARED=1"

h{*}: install = false

include/h{*}:
{
  install         = include/
  install.subdirs = true
}
